1 bit adder
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity full_adder_1bit is
    Port (
        A     : in  STD_LOGIC;
        B     : in  STD_LOGIC;
        Cin   : in  STD_LOGIC;
        Sum   : out STD_LOGIC;
        Cout  : out STD_LOGIC
    );
end full_adder_1bit;

architecture Structural of full_adder_1bit is
    signal s1, c1, c2 : STD_LOGIC;
begin
    -- Half Adder 1
    s1  <= A XOR B;
    c1  <= A AND B;

    -- Half Adder 2
    Sum <= s1 XOR Cin;
    c2  <= s1 AND Cin;

    -- Carry Out
    Cout <= c1 OR c2;
end Structural;

4Bit adder
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity full_adder_4bit is
    Port (
        A    : in  STD_LOGIC_VECTOR (3 downto 0);
        B    : in  STD_LOGIC_VECTOR (3 downto 0);
        Cin  : in  STD_LOGIC;
        Sum  : out STD_LOGIC_VECTOR (3 downto 0);
        Cout : out STD_LOGIC
    );
end full_adder_4bit;

architecture Structural of full_adder_4bit is
    component full_adder_1bit
        Port (
            A     : in  STD_LOGIC;
            B     : in  STD_LOGIC;
            Cin   : in  STD_LOGIC;
            Sum   : out STD_LOGIC;
            Cout  : out STD_LOGIC
        );
    end component;

    signal carry : STD_LOGIC_VECTOR(3 downto 0);
begin
    -- Instantiate 1st Full Adder (LSB)
    FA0: full_adder_1bit port map (
        A    => A(0),
        B    => B(0),
        Cin  => Cin,
        Sum  => Sum(0),
        Cout => carry(0)
    );

    -- Instantiate 2nd Full Adder
    FA1: full_adder_1bit port map (
        A    => A(1),
        B    => B(1),
        Cin  => carry(0),
        Sum  => Sum(1),
        Cout => carry(1)
    );

    -- Instantiate 3rd Full Adder
    FA2: full_adder_1bit port map (
        A    => A(2),
        B    => B(2),
        Cin  => carry(1),
        Sum  => Sum(2),
        Cout => carry(2)
    );

    -- Instantiate 4th Full Adder (MSB)
    FA3: full_adder_1bit port map (
        A    => A(3),
        B    => B(3),
        Cin  => carry(2),
        Sum  => Sum(3),
        Cout => Cout
    );

end Structural;

Top design
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity LogicalStep_Lab2_top is
    Port (
        SW    : in  STD_LOGIC_VECTOR(7 downto 0); -- Switches for inputs
        pb_n  : in  STD_LOGIC_VECTOR(3 downto 0); -- Push buttons
        INST1 : out STD_LOGIC_VECTOR(6 downto 0); -- Seven-segment display 1
        INST2 : out STD_LOGIC_VECTOR(6 downto 0)  -- Seven-segment display 2
    );
end LogicalStep_Lab2_top;

architecture Structural of LogicalStep_Lab2_top is
    component full_adder_4bit
        Port (
            A    : in  STD_LOGIC_VECTOR (3 downto 0);
            B    : in  STD_LOGIC_VECTOR (3 downto 0);
            Cin  : in  STD_LOGIC;
            Sum  : out STD_LOGIC_VECTOR (3 downto 0);
            Cout : out STD_LOGIC
        );
    end component;

    signal hex_A, hex_B, sum_result : STD_LOGIC_VECTOR(3 downto 0);
    signal carry_out : STD_LOGIC;
    signal sum_display : STD_LOGIC_VECTOR(3 downto 0);
    signal carry_display : STD_LOGIC_VECTOR(3 downto 0);
begin
    -- Assigning Switches to Operands
    hex_A <= SW(3 downto 0);
    hex_B <= SW(7 downto 4);

    -- Instantiate the 4-bit Full Adder
    FA4: full_adder_4bit port map (
        A    => hex_A,
        B    => hex_B,
        Cin  => '0',
        Sum  => sum_result,
        Cout => carry_out
    );

    -- Concatenation for Carry Display
    carry_display <= "000" & carry_out;

    -- Connect sum to INST1 seven-segment display
    INST1 <= sum_result;

    -- Connect carry out to INST2 display
    INST2 <= carry_display;
end Structural;



----
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_VECTOR.ALL;

entity Lab2_PartD_Top is
    Port (
        SW    : in  STD_LOGIC_VECTOR(7 downto 0);  -- Switches for inputs
        INST1 : out STD_LOGIC_VECTOR(6 downto 0); -- 7-segment display 1 (7 bits)
        INST2 : out STD_LOGIC_VECTOR(6 downto 0)  -- 7-segment display 2 (7 bits)
    );
end Lab2_PartD_Top;

architecture Structural of Lab2_PartD_Top is
    -- Declare the Full Adder Component
    component full_adder_4bit
        Port (
            A    : in  STD_LOGIC_VECTOR (3 downto 0);
            B    : in  STD_LOGIC_VECTOR (3 downto 0);
            Cin  : in  STD_LOGIC;
            Sum  : out STD_LOGIC_VECTOR (3 downto 0);
            Cout : out STD_LOGIC
        );
    end component;

    -- Internal Signals
    signal hex_A, hex_B, sum_result : STD_LOGIC_VECTOR(3 downto 0);
    signal carry_out : STD_LOGIC;
    signal carry_display : STD_LOGIC_VECTOR(3 downto 0);

begin
    -- Assign switches to operands
    hex_A <= SW(3 downto 0);  -- Lower 4 switches control Operand A
    hex_B <= SW(7 downto 4);  -- Upper 4 switches control Operand B

    -- Instantiate the 4-bit Full Adder
    FA4: full_adder_4bit port map (
        A    => hex_A,
        B    => hex_B,
        Cin  => '0',  -- Carry-in is set to '0'
        Sum  => sum_result,
        Cout => carry_out
    );

    -- Concatenation for Carry Display
    carry_display <= "000" & carry_out;

    -- Fix: Zero-Pad Outputs to 7-bits
    INST1 <= "000" & sum_result;  -- Convert 4-bit sum to 7-bit
    INST2 <= "000" & carry_display;  -- Convert 4-bit carry to 7-bit

end Structural;
